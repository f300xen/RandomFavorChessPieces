<!DOCTYPE html>
<html>

<head>
    <link rel="icon" href="Bee.png">
    <title>Rival Developer JavisSoft</title>
    <style>
        html,
        body,
        div {
            margin: 0;
            padding: 0;
            font-family: arial;
            letter-spacing: -.01rem;
        }

        body {
            background-color: black;
        }

        .card {
            pointer-events:none;
            
            display: block;
            position: absolute;

            left: calc(50% - 10rem);
            top: calc(50% - 15.5rem);

            height: 31rem;
            width: 20rem;

            background-color: rgba(220, 210, 200, 1);
            border: .4rem ridge #83471f;
            box-sizing: border-box;
        }

        .card .name {
            display: block;
            position: absolute;
            left: .1rem;
            top: .1rem;

            width: 19rem;
            height: 2rem;

            border: .2rem outset #83471f;
            border-radius: .4rem;
            box-sizing: border-box;

            font-size: 145%;
            font-weight: normal;
            text-align: center;
            text-transform: capitalize;

            filter: blur(.75px);
        }

        .card .cost {
            display: block;
            position: absolute;

            left: .1rem;
            top: 2.2rem;

            padding: .4rem 0;
            width: 2.5rem;
            height: 2.5rem;

            border: .2rem outset #83471f;
            border-radius: 50%;
            box-sizing: border-box;

            background-color: yellow;
            text-align: center;

            font-size: 125%;
            font-weight: normal;

            filter: blur(.75px);
        }

        .card img {
            display: block;
            position: absolute;

            left: 5.1rem;
            top: 2.2rem;

            width: 9rem;
            height: 9rem;

            filter: blur(.5px);

            opacity: .8;
        }

        .card .board {
            display: block;
            position: absolute;

            left: 3.1rem;
            top: 11.2rem;

            width: 13rem;
            height: 13rem;

            line-height: 0;

            filter: blur(.5px);
        }

        .card .type {
            display: block;
            position: absolute;

            left: -.4rem;
            top: 24.2rem;

            width: 20rem;
            height: 4rem;

            text-align: center;
            font-size: 125%;

            filter: blur(.75px);
        }

        .card .passive {
            display: block;
            position: absolute;

            left: .1rem;
            top: 25.65rem;

            width: 19rem;
            height: 4rem;

            text-align: center;
            font-size: 125%;

            filter: blur(.75px);
        }

        .card .set {
            display: block;
            position: absolute;
            left: .1rem;
            top: 28.9rem;

            width: 19rem;
            height: 2rem;

            text-align: center;
            font-size: 125%;
            font-style: italic;

            filter: blur(.75px);
        }

        .plug {
            display: block;
            position: absolute;

            left: calc(50% - 10rem);
            top: .25rem;

            padding: .25rem 0;
            width: 20rem;

            background-color: rgba(220, 210, 200, 1);
            border: .4rem ridge #83471f;
            box-sizing: border-box;

            text-align: center;
            text-decoration:none;
            font-size:150%;
            font-weight:700;
            color:black;
            
            filter:blur(.75px);
        }

        .note {
            pointer-events:none;
            
            display: block;
            position: absolute;

            left: calc(50% - 10rem);
            top: calc(50% + 16rem);

            padding: .25rem 0;
            width: 20rem;

            background-color: rgba(220, 210, 200, 1);
            border: .4rem ridge #83471f;
            box-sizing: border-box;

            text-align: center;
            filter: blur(.75px);
        }
    </style>

    <div style="display:none">
        <div class="square"></div>
        <div class="movetype piece"></div>
        <div class="movetype moveAttack"></div>
        <div class="movetype uMoveAttack"></div>
        <div class="movetype moveOnly"></div>
        <div class="movetype uMoveOnly"></div>
        <div class="movetype attackOnly"></div>
        <div class="movetype uAttackOnly"></div>
        <div class="movetype moveFromStart">
            <div>S</div>
        </div>
        <div class="movetype uMoveFromStart">
            <div>S</div>
        </div>
        <div class="movetype moveAttackSwap">
            <div>ðŸ—˜</div>
        </div>
        <div class="movetype ability"></div>

        <div class="movetype none" style="display:none;"></div>
    </div>

    <style>
        .card .board .square {
            display: inline-block;

            width: 1rem;
            height: 1rem;
        }

        .card .board .square:nth-child(odd) {
            background-color: white;
        }

        .card .board .square:nth-child(even) {
            background-color: #b4b4b4;
        }

        .card .board .square .movetype {
            filter: blur(.5px);

            display: block;
            position: relative;

            --size;

            left: calc((1rem - var(--size)) / 2);
            top: calc((1rem - var(--size)) / 2);

            width: var(--size);
            height: var(--size);
        }

        .movetype {
            --size: .6rem;

            color: white;
            font-size: 75%;
        }

        .movetype.piece {
            --size: .5rem;

            border-radius: 50%;

            background-color: #5f5f5f;
        }

        .movetype.moveAttack {
            background-color: black;
        }

        .movetype.uMoveAttack {
            border-radius: 50%;

            background-color: black;
        }

        .movetype.moveOnly {
            background-color: #6177e0;
        }

        .movetype.uMoveOnly {
            border-radius: 50%;

            background-color: #6177e0;
        }

        .movetype.attackOnly {
            background-color: #ed1c24;
        }

        .movetype.uAttackOnly {
            border-radius: 50%;

            background-color: #ed1c24;
        }

        .movetype.moveFromStart {
            background-color: #6177e0;
        }

        .movetype.moveFromStart div {
            display: block;
            position: absolute;

            top: .3rem;
            left: 0;

            height: 100%;
            width: 100%;

            text-align: center;
        }

        .movetype.uMoveFromStart {
            border-radius: 50%;

            background-color: #6177e0;
        }

        .movetype.uMoveFromStart div {
            display: block;
            position: absolute;

            top: .3rem;
            left: -1rem;

            height: 100%;
            width: 100%;

            text-align: center;
        }

        .movetype.moveAttackSwap {
            background-color: black;
        }

        .movetype.moveAttackSwap div {
            display: block;
            position: absolute;

            top: .3rem;
            left: 0;

            height: 100%;
            width: 100%;

            text-align: center;
        }

        .movetype.ability {
            background-color: #fff200;
        }
    </style>

    <script type="text/javascript">
        var boardParent;

        function MakeBoard() {
            boardParent = document.querySelector(".board");
            var squarePrefab = document.querySelector(".square");

            var pieceHere = document.querySelector(".piece");
            var x, y;
            for (y = 0; y < 13; y++) {
                for (x = 0; x < 13; x++) {
                    var square = squarePrefab.cloneNode(false);
                    //square.innerHTML = x + "," + y;
                    boardParent.appendChild(square);
                    if (x == 6 && y == 6) {
                        var piece = pieceHere.cloneNode(false);
                        boardParent.childNodes[y * 13 + x + 1].appendChild(piece);
                    }
                }
            }

            var rand = Math.random();
            if (rand > 1) {
                GenerateMinion();
            } else {
                GenerateChampion();
            }
            SetRandomRarity();
            fetchAsync("https://raw.githubusercontent.com/dariusk/corpora/master/data/words/nouns.json").then(function(names) {
                var name = names["nouns"][Math.floor(names["nouns"].length * Math.random())];
                document.querySelector(".name").textContent = name;
            });
        }

        function GenerateMinion() {
            var type = document.querySelector(".type");
            type.innerHTML = "Minion (promotes to ";
            fetchAsync("https://raw.githubusercontent.com/dariusk/corpora/master/data/words/nouns.json").then(function(names) {
                var name = names["nouns"][Math.floor(names["nouns"].length * Math.random())];
                type.innerHTML += name.charAt(0).toUpperCase() + name.slice(1) + ")<br>";
            });

            var cost = 0;

            var passive = document.querySelector(".passive");
            var passiveText = "";
            var passives = 0;

            var hasAbility = false;
            var rand = Math.random();
            if (rand > 0.93) { // 7% has ability
                hasAbility = true;
                passiveText += "Ability: create a"
            }

            if (hasAbility) {
                fetchAsync("https://raw.githubusercontent.com/dariusk/corpora/master/data/words/nouns.json").then(function(names) {
                    var name = names["nouns"][Math.floor(names["nouns"].length * Math.random())];

                    var times = Math.floor(Math.pow(Math.random() * 2, 2)) + 1;
                    if (name.charAt(0) == 'a' || name.charAt(0) == 'e' || name.charAt(0) == 'i' || name.charAt(0) == 'o' || name.charAt(0) == 'u') {
                        passiveText += "n";
                    }
                    passiveText += " " + name;
                    if (times > 1) {
                        passiveText += " " + times + " times per game."
                    } else {
                        passiveText += " once per game."
                    }
                    passive.innerHTML = passiveText;
                });

            } else {
                passive.innerHTML = passiveText;
            }
        }

        function GenerateChampion() {
            var type = document.querySelector(".type");
            type.innerHTML = "Champion";

            var cost = 0;

            var passive = document.querySelector(".passive");
            var passiveText = "";
            var passives = 0;

            var rand = Math.random();
            var hasAbility = false;
            if (rand > 0.93) { // 7% has ability
                hasAbility = true;
                cost += Math.random() * 3 * Math.random() * 3 * Math.random();
                passiveText += "Ability: create a"
            }
            var i;
            for (i = 0; i < 1; i += Math.random()) {
                rand = Math.random();
                var movetype;
                var movetypeValue;
                if (rand > 0.86) {
                    movetype = "moveOnly"
                    movetypeValue = 0;
                } else if (rand > 0.73) {
                    movetype = "attackOnly"
                    movetypeValue = 1;
                } else if (rand > 0.6) {
                    movetype = "uMoveOnly";
                    movetypeValue = 0;
                } else if (rand > 0.5) {
                    movetype = "moveAttackSwap";
                    movetypeValue = 2;
                } else if (rand > 0.36 && i != 0) {
                    movetype = "none";
                    movetypeValue = 0;
                } else {
                    movetype = "moveAttack"
                    movetypeValue = 1.5;
                    cost += 1;
                }

                var vertical = Math.floor(Math.random() * 7);
                vertical -= Math.floor(Math.random() * vertical);
                vertical = Math.max(0, vertical);

                var diagonal = Math.floor(Math.random() * 7);
                diagonal -= Math.floor(Math.random() * diagonal);
                diagonal = Math.max(0, diagonal);
                if (diagonal > 5 && (movetype == "attackOnly" || movetype == "moveAttack")) {
                    if (hasAbility) {
                        diagonal--;
                    } else if (passives == 0) {
                        passives++;
                        passiveText += "*Central<br>";
                    }
                }


                var horizontal = Math.floor(Math.random() * 7);
                horizontal -= Math.floor(Math.random() * 7);
                horizontal = Math.max(0, horizontal);

                if (vertical == 0 && diagonal == 0 && i == 0) {
                    vertical++;
                }

                var vDisplacement = 0;
                var dDisplacement = 0;
                var hDisplacement = 0;

                if ((vertical > 0 || horizontal > 0) && diagonal > 0) {
                    cost += (movetypeValue * movetypeValue * 4);
                    cost++;
                }

                cost += (diagonal - dDisplacement / 2) * .8 * Math.pow(diagonal, .83) * movetypeValue;
                cost += (horizontal - hDisplacement / 2) * .4 * Math.sqrt(horizontal) * movetypeValue;
                cost += (vertical - vDisplacement / 4) * .63 * Math.pow(vertical, .75) * movetypeValue;

                var xDir, yDir, dist;
                for (dist = 1; dist < 7; dist++) {
                    for (xDir = -1; xDir <= 1; xDir++) {
                        for (yDir = -1; yDir <= 1; yDir++) {
                            if (xDir != 0 && yDir == 0) {
                                if (dist < horizontal + hDisplacement && dist > hDisplacement) {
                                    AddMovetype(movetype, 7 + dist * xDir, 7 + dist * yDir);
                                }
                            } else if (xDir == 0 && yDir != 0) {
                                if (dist < vertical + vDisplacement && dist > vDisplacement) {
                                    AddMovetype(movetype, 7 + dist * xDir, 7 + dist * yDir);
                                }
                            } else if (xDir != 0 && yDir != 0) {
                                if (dist < diagonal + dDisplacement && dist > dDisplacement) {
                                    AddMovetype(movetype, 7 + dist * xDir, 7 + dist * yDir);
                                }
                            }
                        }
                    }
                }
            }

            var rangeThree = false;
            for (i = 0; i < .5; i += Math.random()) {
                rand = Math.random();
                var movetype = Math.random() > 0.4 ? "uMoveAttack" : "uAttackOnly";
                if (rand > 0.93 && !hasAbility) {
                    if (!rangeThree) {
                        passives++;
                        rangeThree = true;
                        passiveText += "Cannot move until turn 3.<br>";
                        var x = Math.floor(Math.random() * 4) - 2;
                        var y = 3;
                        if (x == 0 && y == 0) {
                            y++;
                        }
                        AddMovetype(movetype, 7 + x, 7 + y);
                        AddMovetype(movetype, 7 - x, 7 + y);
                        cost += movetype == "uMoveAttack" ? 8 : 6;
                    }
                } else if (rand > 0.83) {
                    var x = Math.floor(Math.random() * 2) + 2;
                    var y = Math.floor(Math.random() * 2) + 1;
                    if (Math.random() > 0.5) {
                        y = -y;
                    }
                    if (x == 0 && y == 0) {
                        y++;
                    }
                    AddMovetype(movetype, 7 + x, 7 + y);
                    AddMovetype(movetype, 7 - x, 7 + y);
                    cost += Math.max(y, 0);
                }
            }

            rand = Math.random();

            if (rand > 0.9 && !hasAbility && passives < 2) {
                passiveText += "*Armored<br>";
                cost *= 2.47;
                passives++;
            }
            rand = Math.random();
            if (rand > 0.85 && !hasAbility && passives < 2) {
                passiveText += "*Stealth<br>";
                cost += 2;
                passives++;
            }
            rand = Math.random();
            if (rand > 0.83 && !hasAbility && passives < 2) {
                passiveText += "*Berserk<br>";
                cost -= 2;
                passives++;
            }
            rand = Math.random();
            if (rand > 0.81 && !hasAbility && passives < 2) {
                passiveText += "*Withdraw<br>";
                passives++;
            }

            if (hasAbility) {
                var v;
                for (v = 0; v < .5; v += Math.random()) {
                    var x = Math.floor(Math.random() * 4) - 2;
                    var y = Math.floor(Math.random() * 4) - 2;
                    if (x == 0 && y == 0) {
                        y++;
                    }
                    AddMovetype("ability", 7 + x, 7 + y);
                    AddMovetype("ability", 7 - x, 7 + y);
                }
            }

            if (hasAbility) {
                fetchAsync("https://raw.githubusercontent.com/dariusk/corpora/master/data/words/nouns.json").then(function(names) {
                    var name = names["nouns"][Math.floor(names["nouns"].length * Math.random())];
                    var times = Math.floor(Math.pow(Math.random() * 2, 2)) + 1;
                    if (name.charAt(0) == 'a' || name.charAt(0) == 'e' || name.charAt(0) == 'i' || name.charAt(0) == 'o' || name.charAt(0) == 'u') {
                        passiveText += "n";
                    }
                    passiveText += " " + name;
                    if (times > 1) {
                        passiveText += " " + times + " times per game."
                    } else {
                        passiveText += " once per game."
                    }
                    passive.innerHTML = passiveText;
                });

            } else {
                passive.innerHTML = passiveText;
            }
            var costText = document.querySelector(".cost");
            costText.innerHTML = Math.floor(Math.pow(cost, .65) + 3 - 6 * Math.random());
        }

        function SetRandomRarity() {
            var rarityText = "";
            var rarity = document.querySelector(".set");
            var rand = Math.random() * 3.1;
            var set = Math.floor(Math.random() * 96 + 4);
            if (rand > 3) {
                rarityText += "Mythic";
            } else if (rand > 2) {
                rarityText += "Epic";
            } else if (rand > 1) {
                rarityText += "Rare";
            } else {
                rarityText += "Common";
            }
            rarityText += " - " + set + "th Edition";
            rarity.innerHTML = rarityText;
        }

        function AddMovetype(movetype, x, y) {
            boardParent = document.querySelector(".board");

            var sprite = document.querySelector("." + movetype).cloneNode(true);

            var square = boardParent.childNodes[(13 - y) * 13 + x];
            square.innerHTML = "";
            square.appendChild(sprite);
        }

        async function fetchAsync(url) {
            let response = await fetch(url);
            let data = await response.json();
            return data
        }
    </script>
</head>

<body onload="MakeBoard()">
    <a class="plug" href="https://store.steampowered.com/app/1014920/Favor_Chess/">Link to Favor Chess</a>

    <div class="card">
        <div class="name">

        </div>
        <div class="cost">

        </div>
        <img src="Bee.png">
        <div class="board">

        </div>
        <div class="type">

        </div>
        <div class="passive">

        </div>
        <div class="set">
            1st Edition
        </div>
    </div>

    <div class="note">
        (The blur is to be accurate to the game)
    </div>

</body></html>
